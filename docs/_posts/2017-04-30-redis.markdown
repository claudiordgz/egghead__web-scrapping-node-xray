---
published: true
title: Caching
---

# Concluding the caching

I don't want to sweat it, this script is the first phase of this project. The next phase is sticking it into a Lambda function.


```javascript
function getCache (redisClient, key) {
  return new Promise((resolve, reject) => {
    redisClient.get(key, (err, reply) => {
      if (err) {
        reject(err)
      } else {
        resolve(reply)
      }
    })
  })
}

async function readOCReMix (environmentName) {
  let configuration = config.loadConfiguration(environmentName || 'development')
  let payload = await getOCReMixData()
  let redisClient = redis.createClient(configuration.redis.PORT, configuration.redis.HOSTNAME)
  redisClient.auth(configuration.redis.PASSWORD, (err) => {
    if (err) {
      throw err
    }
  })
  let cachedData = await getCache(redisClient, configuration.redis.KEY)
  if (cachedData === null || cachedData !== payload) {
    winston.log('info', 'New OCReMix Payload')
    redisClient.set(configuration.redis.KEY, payload)
  } else {
    winston.log('warning', 'No New OCReMix Payload')
  }
  redisClient.quit()
}

```

The config file is not versioned so it will require the following:

```bash
$ cd config
$ mkdir env
```

And then stick the following in there:

```javascript
module.exports = {
  redis: {
      HOSTNAME: 'your redis host url',
      PORT: 'port',
      RESOURCE_NAME: 'ocremix (or something)',
      PASSWORD: 'LeWildePassword$$$',
      KEY: 'ocremixData'                  
  }
}
```

En garde
